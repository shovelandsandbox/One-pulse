apply plugin: "com.android.application"
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: '../../node_modules/react-native-unimodules/gradle.groovy'
import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
	    sourceCompatibility JavaVersion.VERSION_1_8
	    targetCompatibility JavaVersion.VERSION_1_8
	}

    signingConfigs {
        debugConfig {
            storeFile file("../keystores/onepulse_debug.keystore")
            storePassword "onepulse"
            keyAlias "onepulse"
            keyPassword "onepulse"
        }

        releaseConfig {
            storeFile file("../keystores/onepulse_release.keystore")
            storePassword "onepulse"
            keyAlias "onepulse"
            keyPassword "onepulse"
        }
    }

    flavorDimensions "default"
    productFlavors {
        dev {
            applicationId "com.prudential.pulse.dev"
            resValue "string", "babylon_identifier", "PreprodPrudential"
            resValue "string", "build_config_package", "com.prudential.pulse"
        }
        uat {
            applicationId "com.prudential.pulse.uat"
            resValue "string", "babylon_identifier", "PreprodPrudential"
            resValue "string", "build_config_package", "com.prudential.pulse"
        }
        prod {
            applicationId "com.prudential.pulse.onepulse"
            resValue "string", "babylon_identifier", "PRODUCTION"
            resValue "string", "build_config_package", "com.prudential.pulse"
        }
    }

    buildTypes {
        debug {
            multiDexEnabled true
            signingConfig signingConfigs.debugConfig
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            ndk {
                abiFilters = []
                abiFilters.addAll(project.env.get("ABI_FILTERS").split(';').collect{it as String})
            }
        }

        release {
            multiDexEnabled true
            signingConfig signingConfigs.releaseConfig
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            ndk {
                abiFilters = []
                abiFilters.addAll(project.env.get("ABI_FILTERS").split(';').collect{it as String})
            }
        }
    }

    packagingOptions {
        //exclude 'lib/arm64-v8a/*.so'
        pickFirst '**/libc++_shared.so'
        exclude 'lib/armeabi/*.so'
        exclude 'lib/x86_64/*.so'
        exclude 'lib/mips/*.so'
    }

    defaultConfig {
        applicationId "com.prudential.pulse.dev"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 100006
        versionName "1.0.1"
        ndk {
            // Tells Gradle to build outputs for the following ABIs and package
            // them into your APK.
            abiFilters = []
            abiFilters.addAll(project.env.get("ABI_FILTERS").split(';').collect{it as String})
        }
         multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "arm64-v8a"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86": 2, "arm64-v8a": 3]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    buildToolsVersion '28.0.3'
}
def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}
repositories {
    maven {
        url 'https://artifactory-partners.devops.mhealth.tech/artifactory/libs-release'
        credentials {
            username = "thirdparty-write"
            password = "thirdparty-write"
        }
    }
    maven { url "https://dl.bintray.com/qiscustech/maven" }
}

dependencies {
    // implementation project(':react-native-tts')
    // implementation project(':react-native-keep-awake')
    implementation project(':react-native-iap')
    implementation project(':react-native-image-marker')
    addUnimodulesDependencies()
    implementation project(':react-native-nodemediaclient')
    // implementation project(':react-native-share')
    implementation project(':react-native-orientation')
    implementation project(':@react-native-community_geolocation')
    implementation project(':react-native-document-picker')
    implementation project(':react-native-fast-image')
    implementation project(':@react-native-community_slider')
    implementation project(':react-native-video')
    implementation project(':react-native-pdf')
    implementation project(':react-native-cardview')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-cardview')
    implementation project(':react-native-permissions')
    implementation project(':jail-monkey')
    implementation project(':react-native-device-info')
    implementation project(':react-native-sensitive-info')
    implementation project(':react-native-biometrics')
    implementation project(':react-native-config')
    implementation project(':react-native-push-notification')
    implementation project(':react-native-fbsdk')
    implementation project(':react-native-webview')
    // implementation project(':react-native-background-timer')
    implementation("com.halodoc:madura:1.1.6@aar") {
      transitive = true
    }
    // compile project(':react-native-fcm')
    // implementation project(':react-native-firebase')
    // compile project(':opentok-react-native')
    compile project(':react-native-open-settings')
    compile project(':react-native-maps')
    // compile project(':react-native-google-signin')
    compile project(':react-native-fs')
    compile project(':react-native-heading')
    compile project(':react-native-contacts')
    implementation project(':react-native-image-crop-picker')
    implementation project(':react-native-shake')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-contacts')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':react-native-exception-handler')
    //noinspection GradleCompatible
    implementation 'androidx.appcompat:appcompat:1.0.0'
    compile 'com.android.support:support-v4:+'
    implementation 'com.facebook.react:react-native:+'

    // From node_modules
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
    def sdkVersion = '3.0.0-beta17'
    implementation "com.babylon.sdk:sdk-auth:$sdkVersion"
    implementation "com.babylon.sdk:sdk-user:$sdkVersion"
    implementation "com.babylon.sdk:chat:$sdkVersion"
    implementation "com.babylon.sdk:sdk-clinicalrecords:$sdkVersion"
    implementation "com.babylon.sdk:healthrecords:$sdkVersion"
    implementation "com.babylon.sdk:healthcheck:$sdkVersion"
    implementation "com.babylon.sdk:sdk-digitaltwin:$sdkVersion"
    implementation "com.babylon.sdk:sdk-common:$sdkVersion"
    implementation project(':babylon-chatbot-android-release')
    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    implementation 'com.google.firebase:firebase-core:17.2.0'
    implementation ("com.google.firebase:firebase-analytics:17.2.0"){
      exclude group: "com.google.android.gms"
    }
    // implementation(project(':react-native-google-signin')){
    //   exclude group: "com.google.android.gms"
    // }
    implementation 'com.facebook.android:facebook-android-sdk:4.33.0'
    implementation project(':react-native-svg')
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation project(':react-native-fs')
    implementation project(':rn-fetch-blob')
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.6'
    implementation 'com.google.firebase:firebase-dynamic-links:19.0.0'
    implementation "com.google.firebase:firebase-invites:17.0.0"
    implementation 'com.google.firebase:firebase-messaging:20.0.0'
    implementation 'androidx.biometric:biometric:1.0.1'
    compile project(':react-native-google-fit')
    compile project(':react-native-touch-id')
    compile project(':react-native-twilio-video-webrtc')
    compile project(':react-native-document-picker')
    compile project(':react-native-heading')

    // For animated GIF support
    compile 'com.facebook.fresco:animated-base-support:1.3.0'
    compile 'com.facebook.fresco:animated-gif:1.3.0'
    implementation 'com.facebook.fresco:fresco:1.3.0'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    // dependencies {
    //   compile(project(':react-native-firebase')) {
    //       transitive = false
    //   }
    //   // ... other dependencies listed
    // }
    implementation "com.google.android.gms:play-services-base:17.0.0"

    // implementation "com.google.firebase:firebase-messaging:15.0.2"
    implementation project(':react-native-date-picker')
    android.applicationVariants.all {
      // Set this to false to disable Firebase Performance Monitoring at compile time
      FirebasePerformance {
        instrumentationEnabled true
      }
    }
    implementation 'com.google.firebase:firebase-perf:19.0.0'
    compile project(path: ':react-native-push-notification')
    implementation "com.google.android.gms:play-services-location:16.0.0"
    // api "com.google.android.gms:play-services-location:${safeExtGet('googlePlayServicesVersion', '15.0.1')}"
    compile project(':reactnativesignaturecapture') // <-- add this line
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

configurations.all {
resolutionStrategy {
force 'com.google.android.gms:play-services-gcm:16.1.0'
force 'com.google.android.gms:play-services-base:17.0.0'
force 'com.google.firebase:firebase-core:17.2.0'
force 'com.google.firebase:firebase-messaging:20.0.0'
force 'com.google.android.gms:play-services-auth:16.0.1'
force 'com.google.code.findbugs:jsr305:3.0.0'
force 'com.twilio:video-android:5.1.0'
}}
apply plugin: 'com.google.gms.google-services'
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true
